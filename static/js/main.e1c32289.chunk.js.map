{"version":3,"sources":["components/ReduxFormInput/index.ts","components/ReduxFormInput/ReduxFormInput.tsx","pages/User/validate.ts","lib/normalize.ts","pages/User/AccountDetailForm.tsx","components/ReduxFormSelect/index.ts","components/ReduxFormSelect/ReduxFormSelect.tsx","config/constants.ts","pages/User/PersonalDetailForm.tsx","pages/User/Form.tsx","redux/actionTypes/userTypes.ts","pages/User/index.ts","pages/User/User.tsx","redux/actions/user/add.ts","App.tsx","serviceWorker.ts","redux/reducers/user.ts","redux/reducers/index.ts","redux/store/index.ts","index.tsx"],"names":["ReduxFormInput","field","react_default","a","createElement","FormGroup","row","Label","label","Input","Object","assign","input","type","placeholder","placeHolder","max","maxDate","min","minDate","step","disabled","meta","touched","className","error","validate","values","errors","userName","userDOB","userAge","userGender","userMobileNumber","userAddress","useraccountNumber","userBankName","userbankAddress","name","value","charAt","toUpperCase","slice","mobile","replace","accountNumber","form","reduxForm","destroyOnUnmount","forceUnregisterOnUnmount","touchOnChange","props","isLoading","handleSubmit","previousPage","pristine","submitting","onSubmit","noValidate","Col","sm","Card","CardBody","xs","lg","Field","component","normalize","style","paddingBottom","Button","color","onClick","marginLeft","float","index_esm","size","marginRight","connect","ReduxFormSelect","map","datas","data","i","key","Gender","CurrentDate","moment","format","onChange","event","birthYear","target","dispatch","change","Form","_useState","useState","_useState2","slicedToArray","page","setPage","lib_default","steps","title","activeStep","User_PersonalDetailForm","User_AccountDetailForm","ADD_USER","User","User_Form","console","log","payload","reset","App","pages_User","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","state","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","rootReducer","combineReducers","reducerForm","user","persistConfig","blacklist","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UACeA,ECEkB,SAACC,GAAD,OAC7BC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAAQN,EAAMO,OACdN,EAAAC,EAAAC,cAACK,EAAA,EAADC,OAAAC,OAAA,GACQV,EAAMW,MADd,CAEIC,KAAMZ,EAAMY,KACZC,YAAab,EAAMc,YACnBC,IAAKf,EAAMgB,QACXC,IAAKjB,EAAMkB,QACXC,KAAMnB,EAAMmB,KACZC,SAAUpB,EAAMoB,YAEnBpB,EAAMqB,KAAKC,SAAWrB,EAAAC,EAAAC,cAAA,KAAGoB,UAAU,eAAevB,EAAMqB,KAAKG,4CC6BvDC,EAzCE,SAACC,GACd,IAAMC,EAAoC,GAsC1C,OApCKD,EAAOE,WACVD,EAAOC,SAAW,sBAGfF,EAAOG,UACVF,EAAOE,QAAU,gBAGdH,EAAOI,UACVH,EAAOG,QAAU,gBAGdJ,EAAOK,aACVJ,EAAOI,WAAa,mBAGjBL,EAAOM,mBACVL,EAAOK,iBAAmB,0BAGvBN,EAAOO,cACVN,EAAOM,YAAc,oBAGlBP,EAAOQ,oBACVP,EAAOO,kBAAoB,2BAGxBR,EAAOS,eACVR,EAAOQ,aAAe,sBAGnBT,EAAOU,kBACVT,EAAOS,gBAAkB,yBAGpBT,GC1CEU,EAAO,SAACC,GAAD,OAAmBA,GAASA,EAAMC,OAAO,GAAGC,cAAgBF,EAAMG,MAAM,IAE/EC,EAAS,SAACJ,GAAD,OAAmBA,EAAMK,QAAQ,SAAU,IAAIF,MAAM,EAAG,KAK/DG,EAAgB,SAACN,GAAD,OAC7BA,EACGE,cACAG,QAAQ,UAAW,IACnBF,MAAM,EAAG,KCwERI,EAAOC,YAAqB,CAChCC,kBAAkB,EAClBC,0BAA0B,EAC1BH,KAAM,OACNI,eAAe,EACfxB,YALWqB,CAtEoE,SAACI,GAAe,IACvFC,EAAgED,EAAhEC,UAAWC,EAAqDF,EAArDE,aAAcC,EAAuCH,EAAvCG,aAAcC,EAAyBJ,EAAzBI,SAAUC,EAAeL,EAAfK,WACzD,OACEtD,EAAAC,EAAAC,cAAA,QAAMqD,SAAUJ,EAAcK,YAAY,GACxCxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKC,GAAG,MACN1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMrC,UAAU,eACdtB,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,oBACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,mBACNO,YAAY,uBACZoD,UAAWtB,KAGf3C,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,eACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,cACNO,YAAY,kBACZoD,UAAW7B,MAIjBpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,MACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,kBACLzB,KAAK,WACLqD,UAAWlE,EACXQ,MAAM,iBACNO,YAAY,0BAKpBb,EAAAC,EAAAC,cAAA,OAAKgE,MAAO,CAAEC,cAAe,KAC3BnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEC,MAAM,UACNC,QAASlB,EACTjC,SAAU+B,EACVgB,MAAO,CAAEK,WAAY,OAAQC,MAAO,SAEpCxE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAenD,UAAU,iBAAiBoD,KAAM,KANlD,iBASA1E,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACEC,MAAM,UACNnB,UAAWA,EACXvC,KAAK,SACLuD,MAAO,CAAES,YAAa,OAAQH,MAAO,SACrCrD,SAAUkC,GAAYC,GAErBJ,GAAalD,EAAAC,EAAAC,cAAA,sBAPhB,QAQGgD,GAAalD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAWnD,UAAU,eACjC4B,GAAalD,EAAAC,EAAAC,cAAA,qBACbgD,GAAalD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAWnD,UAAU,iBAAiBoD,KAAM,YAiB1DE,cAAQ,KAARA,CAAchC,oBC1FdiC,ECGmB,SAAC9E,GAAD,OAChCC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KAAQN,EAAMO,OACdN,EAAAC,EAAAC,cAAA,SAAAM,OAAAC,OAAA,GAAYV,EAAMW,MAAlB,CAAyBS,SAAUpB,EAAMoB,SAAUG,UAAU,iBAC3DtB,EAAAC,EAAAC,cAAA,UAAQmC,MAAM,GAAGlB,UAAU,GACxBpB,EAAMc,aAERiE,cAAI/E,EAAMgF,MAAO,SAACC,EAAWC,GAC5B,OACEjF,EAAAC,EAAAC,cAAA,UAAQgF,IAAKD,EAAG5C,MAAO2C,EAAK3C,OACzB2C,EAAK1E,UAKbP,EAAMqB,KAAKC,SAAWrB,EAAAC,EAAAC,cAAA,KAAGoB,UAAU,eAAevB,EAAMqB,KAAKG,kBCjBrD4D,EAAmB,CAC5B,CAAE7E,MAAO,OAAQ+B,MAAO,QACxB,CAAE/B,MAAO,SAAU+B,MAAO,UAC1B,CAAE/B,MAAO,QAAS+B,MAAO,UAGhB+C,QAAcC,KAASC,OAAO,cC0GrC1C,UAAOC,YAAqB,CAChCC,kBAAkB,EAClBC,0BAA0B,EAC1BH,KAAM,OACNpB,YAJWqB,CApGqE,SAACI,GAAe,IACxFE,EAAiBF,EAAjBE,aAQR,OACEnD,EAAAC,EAAAC,cAAA,QAAMqD,SAAUJ,EAAcK,YAAY,GACxCxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKC,GAAG,MACN1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMrC,UAAU,eACdtB,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,MACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,WACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,SACNO,YAAY,kBACZoD,UAAW7B,MAIjBpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,UACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,QACNO,YAAY,sBACZ0E,SA/BK,SAACC,GACpB,IAAIC,EAAYD,EAAME,OAAOrD,MAAMG,MAAM,EAAG,GAExCX,EADmBuD,EAAY5C,MAAM,EAAG,GAChBiD,EAC5BxC,EAAM0C,SAASC,YAAO,OAAQ,UAAW/D,KA4B3Bd,QAASqE,KAGbpF,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,UACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,QACNO,YAAY,qBAKlBb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,aACLzB,KAAK,OACLoE,MAAOI,EACPnB,UAAWa,EACXvE,MAAM,WACNO,YAAY,mBAGhBb,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,KACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,mBACLzB,KAAK,OACLqD,UAAWlE,EACXQ,MAAM,cACNO,YAAY,sBACZoD,UAAWxB,MAIjBzC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,KAAK,GACdJ,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAKI,GAAG,KAAKC,GAAG,MACd9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACE3B,KAAK,cACLzB,KAAK,WACLqD,UAAWlE,EACXQ,MAAM,YACNO,YAAY,qBAKpBb,EAAAC,EAAAC,cAAA,OAAKgE,MAAO,CAAEC,cAAe,KAC3BnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CACE9C,UAAU,cACV+C,MAAM,UACN1D,KAAK,SACLuD,MAAO,CAAES,YAAa,SAJxB,YAOE3E,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAgBnD,UAAU,iBAAiBoD,KAAM,aAgBhDE,cAAQ,KAARA,CAAchC,GCxFdiD,EAzBkC,SAAC5C,GAAe,IAAA6C,EACrCC,mBAAS,GAD4BC,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAsF,EAAA,GACtDI,EADsDF,EAAA,GAChDG,EADgDH,EAAA,GAIrDzC,EAAwBN,EAAxBM,SAAUL,EAAcD,EAAdC,UAUlB,OACIlD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACI3D,EAAAC,EAAAC,cAACkG,EAAAnG,EAAD,CAASoG,MAdH,CAAC,CAAEC,MAAO,oBAAsB,CAAEA,MAAO,mBAcxBC,WAAYL,IACzB,IAATA,GAAclG,EAAAC,EAAAC,cAACsG,EAAD,CAAoBjD,SAX1B,WACb4C,EAAQD,EAAO,MAWD,IAATA,GACGlG,EAAAC,EAAAC,cAACuG,EAAD,CAAmBvD,UAAWA,EAAWE,aAThC,WACjB+C,EAAQD,EAAO,IAQ8D3C,SAAUA,MC3BlFmD,EAAW,WCCTC,ECkBA/B,YAAQ,KAARA,CAbK,SAAC3B,GAAe,IAAA6C,EACFC,oBAAS,GADPC,EAAAxF,OAAAyF,EAAA,EAAAzF,CAAAsF,EAAA,GAC3B5C,EAD2B8C,EAAA,GAAAA,EAAA,GAQlC,OACEhG,EAAAC,EAAAC,cAAC0G,EAADpG,OAAAC,OAAA,CAAM8C,SANa,SAAC9B,GACpBoF,QAAQC,IAAI,SAAUrF,GACtBwB,EAAM0C,SCT6B,CACrCoB,QDQyBtF,ECPzBd,KAAM+F,IDQJzD,EAAM0C,SAASqB,YAAM,UAGS9D,UAAWA,GAAeD,MEH7CgE,UARO,WACpB,OACEjH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgH,EAAD,SCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oICfAC,EAA2B,CAC/BxC,KAAM,IAgBOyC,MAbf,WAA0E,IAArDC,EAAqDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA7CH,EAAeM,EAA8BH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxE,OAAQC,EAAOnH,MACb,KAAK+F,EACH,OAAOlG,OAAAuH,EAAA,EAAAvH,CAAA,GACFkH,EADL,CAEE1C,KAAI,CAAG8C,EAAOf,SAAViB,OAAAxH,OAAAyH,EAAA,EAAAzH,CAAsBkH,EAAM1C,SAGpC,QACE,OAAO0C,ICPEQ,EALKC,YAAgB,CAClCvF,KAAMwF,IACNC,KAAMZ,ICEFa,EAAgB,CACpBC,UAAW,CAAC,QACZrD,IAAK,iBACLsD,aAIIC,EAAmBC,YAAeJ,EAAeJ,GAEjDS,EAAaC,YAAgBC,KAC7BC,GAAQC,YAAYN,EAAkBE,GAC1BK,YAAaF,WCJ/BG,IAASC,OAAOlJ,EAAAC,EAAAC,cANH,kBACXF,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,CAAUL,MAAOA,IACf9I,EAAAC,EAAAC,cAACkJ,EAAD,QAIY,MAAUC,SAASC,eAAe,SJ0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e1c32289.chunk.js","sourcesContent":["import ReduxFormInput from './ReduxFormInput';\nexport default ReduxFormInput;","import React from 'react';\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nconst ReduxFormInput: React.FC = (field: any) => (\n    <FormGroup row={true}>\n        <Label>{field.label}</Label>\n        <Input\n            {...field.input}\n            type={field.type}\n            placeholder={field.placeHolder}\n            max={field.maxDate}\n            min={field.minDate}\n            step={field.step}\n            disabled={field.disabled}\n        />\n        {field.meta.touched && <p className=\"text-danger\">{field.meta.error}</p>}\n    </FormGroup>\n);\n\nexport default ReduxFormInput;","import { FormErrors } from 'redux-form';\nimport { AddUserParams } from './AddUser.d';\n\nconst validate = (values: AddUserParams): FormErrors<AddUserParams> => {\n    const errors: FormErrors<AddUserParams> = {};\n\n    if (!values.userName) {\n      errors.userName = 'User name required';\n    }\n\n    if (!values.userDOB) {\n      errors.userDOB = 'DOB required';\n    }\n\n    if (!values.userAge) {\n      errors.userAge = 'Age required';\n    }\n\n    if (!values.userGender) {\n      errors.userGender = 'Gender required';\n    }\n\n    if (!values.userMobileNumber) {\n      errors.userMobileNumber = 'Mobile number required';\n    }\n\n    if (!values.userAddress) {\n      errors.userAddress = 'Address required';\n    }\n\n    if (!values.useraccountNumber) {\n      errors.useraccountNumber = 'Account number required';\n    }\n\n    if (!values.userBankName) {\n      errors.userBankName = 'Bank name required';\n    }\n\n    if (!values.userbankAddress) {\n      errors.userbankAddress = 'Bank address required';\n    }\n\n    return errors;\n};\nexport default validate;","export const name = (value: string) => value && value.charAt(0).toUpperCase() + value.slice(1);\n\nexport const mobile = (value: string) => value.replace(/[^\\d]/g, '').slice(0, 10);\n\nexport const mobileNumber = (value: string) =>\n  value && !/^([6-9]\\d{9})$/.test(value) ? 'Invalid mobile number, must be 10 digits' : undefined;\n\n  export const accountNumber = (value: string) =>\n  value\n    .toUpperCase()\n    .replace(/[^0-9]/g, '')\n    .slice(0, 16);  ","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\nimport ReduxFormInput from '../../components/ReduxFormInput';\nimport { Col, Card, CardBody, Button, FormGroup } from 'reactstrap';\nimport { FaChevronLeft, FaSpinner, FaRegSave } from 'react-icons/fa';\nimport validate from './validate';\nimport { accountNumber, name } from '../../lib/normalize';\n\ninterface Props {\n  previousPage: any;\n  isLoading: boolean;\n}\nexport const AccountDetailForm: React.FC<Props & InjectedFormProps<{}, Props>> = (props: any) => {\n  const { isLoading, handleSubmit, previousPage, pristine, submitting } = props;\n  return (\n    <form onSubmit={handleSubmit} noValidate={true}>\n      <Col sm=\"12\">\n        <Card className=\"card-border\">\n          <CardBody>\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"useraccountNumber\"\n                  type=\"text\"\n                  component={ReduxFormInput}\n                  label=\"Account Number *\"\n                  placeHolder=\"Enter Account Number\"\n                  normalize={accountNumber}\n                />\n              </Col>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"userBankName\"\n                  type=\"text\"\n                  component={ReduxFormInput}\n                  label=\"Bank Name *\"\n                  placeHolder=\"Enter Bank Name\"\n                  normalize={name}\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"12\">\n                <Field\n                  name=\"userbankAddress\"\n                  type=\"textarea\"\n                  component={ReduxFormInput}\n                  label=\"Bank Address *\"\n                  placeHolder=\"Enter Bank Address\"\n                />\n              </Col>\n            </FormGroup>\n          </CardBody>\n          <div style={{ paddingBottom: 30 }}>\n            <Button\n              color=\"success\"\n              onClick={previousPage}\n              disabled={isLoading}\n              style={{ marginLeft: '20px', float: \"left\" }}\n            >\n              <FaChevronLeft className=\"button-padding\" size={18} />\n              &nbsp; Previous\n            </Button>\n            <Button\n              color=\"success\"\n              isLoading={isLoading}\n              type=\"submit\"\n              style={{ marginRight: '20px', float: \"right\" }}\n              disabled={pristine || submitting}\n            >\n              {isLoading && <span>Saving</span>} &nbsp;\n              {isLoading && <FaSpinner className=\"icon-spin\" />}\n              {!isLoading && <span>Save</span>}\n              {!isLoading && <FaRegSave className=\"button-padding\" size={18} />}\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    </form>\n  );\n};\n\nconst form = reduxForm<{}, Props>({\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: true,\n  form: 'user',\n  touchOnChange: true,\n  validate,\n})(AccountDetailForm);\n\nexport default connect(null)(form);","import ReduxFormSelect from './ReduxFormSelect';\nexport default ReduxFormSelect;","import { map } from 'lodash';\nimport React from 'react';\nimport { FormGroup, Label } from 'reactstrap';\n\nconst ReduxFormSelect: React.FC = (field: any) => (\n  <FormGroup row={true}>\n    <Label>{field.label}</Label>\n    <select {...field.input} disabled={field.disabled} className=\"form-control\">\n      <option value=\"\" disabled={true}>\n        {field.placeHolder}\n      </option>\n      {map(field.datas, (data: any, i: number) => {\n        return (\n          <option key={i} value={data.value}>\n            {data.label}\n          </option>\n        );\n      })}\n    </select>\n    {field.meta.touched && <p className=\"text-danger\">{field.meta.error}</p>}\n  </FormGroup>\n);\n\nexport default ReduxFormSelect;","import moment from 'moment';\n\nexport const Gender: object[] = [\n    { label: 'Male', value: 'male' },\n    { label: 'Female', value: 'female' },\n    { label: 'Other', value: 'other' },\n  ];\n\nexport const CurrentDate = moment().format('YYYY-MM-DD');  ","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, InjectedFormProps, reduxForm, change } from 'redux-form';\nimport { Button, Card, CardBody, Col, FormGroup } from 'reactstrap';\nimport ReduxFormInput from '../../components/ReduxFormInput';\nimport { FaChevronRight } from 'react-icons/fa';\nimport validate from './validate';\nimport ReduxFormSelect from '../../components/ReduxFormSelect';\nimport { Gender, CurrentDate } from '../../config/constants';\nimport { name, mobile } from '../../lib/normalize';\nimport '../../styles/reduxformjest.css';\n\ninterface Props { };\n\nexport const PersonalDetailForm: React.FC<Props & InjectedFormProps<{}, Props>> = (props: any) => {\n  const { handleSubmit } = props;\n\n  const handleChange = (event: any) => {\n    var birthYear = event.target.value.slice(0, 4);\n    var currentYear: any = CurrentDate.slice(0, 4);\n    var userAge = currentYear - birthYear;\n    props.dispatch(change('user', 'userAge', userAge));\n  }\n  return (\n    <form onSubmit={handleSubmit} noValidate={true}>\n      <Col sm=\"12\">\n        <Card className=\"card-border\">\n          <CardBody>\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"12\">\n                <Field\n                  name=\"userName\"\n                  type=\"text\"\n                  component={ReduxFormInput}\n                  label=\"Name *\"\n                  placeHolder=\"Enter User Name\"\n                  normalize={name}\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"userDOB\"\n                  type=\"date\"\n                  component={ReduxFormInput}\n                  label=\"DOB *\"\n                  placeHolder=\"Enter Date of Birth\"\n                  onChange={handleChange}\n                  maxDate={CurrentDate}\n                />\n              </Col>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"userAge\"\n                  type=\"text\"\n                  component={ReduxFormInput}\n                  label=\"Age *\"\n                  placeHolder=\"Enter User Age\"\n                />\n              </Col>\n            </FormGroup>\n\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"userGender\"\n                  type=\"text\"\n                  datas={Gender}\n                  component={ReduxFormSelect}\n                  label=\"Gender *\"\n                  placeHolder=\"Select Gender\"\n                />\n              </Col>\n              <Col xs=\"12\" lg=\"6\">\n                <Field\n                  name=\"userMobileNumber\"\n                  type=\"text\"\n                  component={ReduxFormInput}\n                  label=\"Mobile No *\"\n                  placeHolder=\"Enter Mobile Number\"\n                  normalize={mobile}\n                />\n              </Col>\n            </FormGroup>\n            <FormGroup row={true}>\n              <Col xs=\"12\" lg=\"12\">\n                <Field\n                  name=\"userAddress\"\n                  type=\"textarea\"\n                  component={ReduxFormInput}\n                  label=\"Address *\"\n                  placeHolder=\"Enter Address\"\n                />\n              </Col>\n            </FormGroup>\n          </CardBody>\n          <div style={{ paddingBottom: 30 }}>\n            <Button\n              className=\"float-right\"\n              color=\"success\"\n              type=\"submit\"\n              style={{ marginRight: '10px' }}\n            >\n              Next &nbsp;\n              <FaChevronRight className=\"button-padding\" size={18} />\n            </Button>\n          </div>\n        </Card>\n      </Col>\n    </form>\n  );\n}\n\nconst form = reduxForm<{}, Props>({\n  destroyOnUnmount: false,\n  forceUnregisterOnUnmount: false,\n  form: 'user',\n  validate,\n})(PersonalDetailForm);\n\nexport default connect(null)(form);","import React, { useState } from 'react';\nimport { InjectedFormProps } from 'redux-form';\nimport Stepper from 'react-stepper-horizontal';\nimport { Card } from 'reactstrap';\n\nimport AccountDetailForm from './AccountDetailForm';\nimport PersonalDetailForm from './PersonalDetailForm';\n\nexport const Form: React.FC<InjectedFormProps> = (props: any) => {\n    const [page, setPage] = useState(0);\n    const steps = [{ title: 'Personal Details' }, { title: 'Account Detail' }];\n\n    const { onSubmit, isLoading } = props;\n\n    const nextPage = () => {\n        setPage(page + 1);\n    };\n\n    const previousPage = () => {\n        setPage(page - 1);\n    };\n\n    return (\n        <Card>\n            <Stepper steps={steps} activeStep={page} />\n            {page === 0 && <PersonalDetailForm onSubmit={nextPage} />}\n            {page === 1 && (\n                <AccountDetailForm isLoading={isLoading} previousPage={previousPage} onSubmit={onSubmit} />\n            )}\n        </Card>\n    );\n}\n\nexport default Form;","export const ADD_USER = 'ADD_USER';\n","import User from './User';\nexport default User;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Form from './Form';\nimport { addUser } from '../../redux/actions/user/add';\nimport { reset } from 'redux-form';\n\nexport const User = (props: any) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSubmit = (values: any) => {\n    console.log('values', values);\n    props.dispatch(addUser(values));\n    props.dispatch(reset('user'));\n  }\n  return (\n    <Form onSubmit={handleSubmit} isLoading={isLoading} {...props} />\n  );\n}\n\nexport default connect(null)(User);","import { ADD_USER } from '../../actionTypes/userTypes';\n\nexport const addUser = (data: any) => ({\n  payload: data,\n  type: ADD_USER,\n});","import React from 'react';\nimport User from './pages/User';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <User />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_USER } from '../actionTypes/userTypes';\nimport { UserState, UserTypes } from '../actions/user/add.d';\n\nconst INITIAL_STATE: UserState = {\n  data: [],\n};\n\nfunction userReducer(state = INITIAL_STATE, action: UserTypes): UserState {\n  switch (action.type) {\n    case ADD_USER: {\n      return {\n        ...state,\n        data: [action.payload, ...state.data],\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;","import { combineReducers } from 'redux';\nimport { reducer as reducerForm } from 'redux-form';\nimport userReducer from './user';\n\nconst rootReducer = combineReducers({\n  form: reducerForm,\n  user: userReducer,\n});\n\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\n\nconst persistConfig = {\n  blacklist: ['form'],\n  key: 'reactreduxform',\n  storage\n};\n\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from '../src/redux/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}